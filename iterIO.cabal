Name:           iterIO
Version:        0.0
Cabal-Version:  >= 1.2
build-type:     Simple
License:        BSD3
License-File:   LICENSE
Author:         David Mazieres
Stability:      experimental
Maintainer:     http://www.scs.stanford.edu/~dm/addr/
Category:       System, Data
Synopsis:       Iteratee-based IO with simple pipe operators
Extra-source-files:
        Examples/simple.hs, Examples/fgrep.hs,
        Examples/reliable/Arc4.hs, Examples/reliable/NetSim.hs,
        Examples/reliable/Protocol.hs, Examples/reliable/TM.hs,
        Examples/reliable/Target.hs, Examples/reliable/reference.hs,
        Examples/reliable/tester.hs

Description:

        Iteratee-based IO is an alternative to lazy IO that offers
        better error handling, referential transparency, and
        convenient composition of protocol layers or parsers.  New
        users should see the tutorial in the "Data.IterIO" module
        documentation.  The approach was originally advocated by Oleg
        Kiselyov (see talk slides at
        <http://okmij.org/ftp/Streams.html#iteratee>).  The main
        implementation by Kiselyov and John Lato is simply called
        /iteratee/ (<http://hackage.haskell.org/package/iteratee>).
        This package is an experimental from-scratch re-implementation
        of the iteratee concepts with a new interface designed to
        simplify many of the abstractions and make them easier to use.
        However, Kiselyov and Lato are continuing to improve the
        original iteratee package, which may someday subsume this one.
        The author of this package is particularly grateful to John
        Lato for helping him understand much of the important design
        rationale behind the original iteratee package.  The latest
        development version of the iterIO sources is available via git
        by executing:
        
        @git clone http:\/\/www.scs.stanford.edu\/~dm\/repos\/iterIO.git@

Library
  Build-Depends: base >= 4 && < 5,
                 bytestring >= 0.9 && < 1.0,
                 mtl >= 1.1.0.2 && < 2,
                 network >= 2.2 && < 3.0,
                 ListLike >= 1.0 && < 2.0
  Exposed-modules:
    Data.IterIO, Data.IterIO.Base, Data.IterIO.ListLike,
    Data.IterIO.Extra
  Extensions:
    ForeignFunctionInterface, FlexibleInstances
